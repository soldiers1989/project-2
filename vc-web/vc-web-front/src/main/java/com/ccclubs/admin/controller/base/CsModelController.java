package com.ccclubs.admin.controller.base;

import com.ccclubs.admin.entity.CsModelCrieria;
import com.ccclubs.admin.model.CsModel;
import com.ccclubs.admin.model.CsModelMapping;
import com.ccclubs.admin.model.SrvGroup;
import com.ccclubs.admin.model.SrvUser;
import com.ccclubs.admin.query.CsModelQuery;
import com.ccclubs.admin.service.ICsModelMappingService;
import com.ccclubs.admin.service.ICsModelService;
import com.ccclubs.admin.service.ISrvGroupService;
import com.ccclubs.admin.util.UserAccessUtils;
import com.ccclubs.admin.vo.TableResult;
import com.ccclubs.admin.vo.VoResult;
import com.github.pagehelper.PageInfo;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.*;

/**
 * 接入车型管理Controller
 *
 * @author
 * @category generated by NovaV1.0
 * @since V1.0
 */
@RestController
@RequestMapping("/admin/model")
public class CsModelController {

    @Autowired
    ICsModelService csModelService;
    @Autowired
    ISrvGroupService srvGroupService;
    @Autowired
    ICsModelMappingService csModelMappingService;


    @Autowired
    UserAccessUtils userAccessUtils;

    /**
     * 获取分页列表数据
     *
     * @param query
     * @param page
     * @param rows
     * @return
     */
    @RequestMapping(value = "/list", method = RequestMethod.GET)
    public TableResult<CsModel> list(CsModelQuery query, @RequestParam(defaultValue = "0") Integer page,
                                     @RequestParam(defaultValue = "10") Integer rows) {
        PageInfo<CsModel> pageInfo = csModelService.getPage(query.getCrieria(), page, rows);
        List<CsModel> list = pageInfo.getList();
        for (CsModel data : list) {
            registResolvers(data);
        }

        TableResult<CsModel> r = new TableResult<>(pageInfo);
        return r;
    }

    /**
     * 创建保存接入车型管理
     *
     * @return
     */
    @RequestMapping(value = "/add", method = RequestMethod.POST)
    public VoResult<?> add(CsModel data) {
        if (null == data.getCsmAddTime()) {
            data.setCsmAddTime(new Date());
        }
        if (null == data.getCsmUpdateTime()) {
            data.setCsmUpdateTime(new Date());
        }
        csModelService.insert(data);
        return VoResult.success();
    }

    /**
     * 更新接入车型管理
     *
     * @param data
     * @return
     */
    @RequestMapping(value = "/update", method = RequestMethod.POST)
    public VoResult<?> update(CsModel data) {
        if (null == data.getCsmUpdateTime()) {
            data.setCsmUpdateTime(new Date());
        }
        csModelService.updateByPrimaryKeySelective(data);
        return VoResult.success();
    }

    /**
     * 删除接入车型管理
     *
     * @return
     */
    @RequestMapping(value = "delete", method = RequestMethod.DELETE)
    public VoResult<?> delete(@RequestParam(required = true) final Long[] ids) {
        csModelService.batchDelete(ids);
        return VoResult.success();
    }

    /**
     * 注册属性内容解析器
     */
    void registResolvers(CsModel data) {
        if (data != null) {
            data.registResolver(com.ccclubs.admin.resolver.CsModelResolver.动力类型.getResolver());
            data.registResolver(com.ccclubs.admin.resolver.CsModelResolver.变速箱类型.getResolver());
            data.registResolver(com.ccclubs.admin.resolver.CsModelResolver.车辆种类.getResolver());
            data.registResolver(com.ccclubs.admin.resolver.CsModelResolver.状态.getResolver());
        }
    }

    /**
     * 获取单条接入车型管理信息
     */
    @RequestMapping(value = "/detail/{id}", method = RequestMethod.GET)
    public VoResult<Map<String, CsModel>> detail(@PathVariable(required = true) Long id) {
        CsModel data = csModelService.selectByPrimaryKey(id.intValue());
        Map<String, CsModel> map = new HashMap<String, CsModel>();
        registResolvers(data);
        map.put("tbody", data);
        return VoResult.success().setValue(map);
    }


    /**
     * 根据文本检索接入车型管理信息
     */
    @RequestMapping(value = "/query", method = RequestMethod.GET)
    public VoResult<Map<String, List<Map<String, Object>>>> query(@CookieValue("token") String token, String text, String where, CsModel queryRecord) {

        //查询车型
        SrvUser user = userAccessUtils.getCurrentUser(token);
        SrvGroup srvGroup = srvGroupService.selectByPrimaryKey(user.getSuGroup().intValue());


        CsModelCrieria query = new CsModelCrieria();
        CsModelCrieria.Criteria c = query.createCriteria();

        if (srvGroup.getSgFlag().equals("factory_user")) {//如果是车厂用户则只关心车型
            CsModelMapping csModelMapping = new CsModelMapping();
            csModelMapping.setUserId(user.getSuId());
            List<CsModelMapping> csModelMappingList = csModelMappingService.select(csModelMapping);
            if (null != csModelMappingList && csModelMappingList.size() > 0) {
                List<Integer> csModelIds = new ArrayList<>();
                for (CsModelMapping aCsModelMappingList : csModelMappingList) {
                    csModelIds.add(aCsModelMappingList.getModelId());
                }
                c.andcsmIdIn(csModelIds);
            }
        }
        if (!StringUtils.isEmpty(text)) {
            String val = String.valueOf(text);
            c.andcsmNameLike(val);
        }
        if (!StringUtils.isEmpty(where)) {
            Integer val = Integer.valueOf(where);
            c.andcsmIdEqualTo(val);
        }
        PageInfo<CsModel> pageInfo = csModelService.getPage(query, 0, 10);
        List<CsModel> list = pageInfo.getList();

        List<Map<String, Object>> mapList = new ArrayList<Map<String, Object>>(list.size());
        Map<String, Object> map;
        for (CsModel data : list) {
            map = new HashMap<String, Object>();
            map.put("value", data.getCsmId());
            map.put("text", data.getCsmName());
            mapList.add(map);
        }
        return VoResult.success().setValue(mapList);
    }

}
