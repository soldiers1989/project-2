package com.ccclubs.admin.controller.base;

import com.ccclubs.admin.entity.SrvHostCrieria;
import com.ccclubs.admin.model.SrvHost;
import com.ccclubs.admin.query.SrvHostQuery;
import com.ccclubs.admin.service.ISrvHostService;
import com.ccclubs.admin.vo.TableResult;
import com.ccclubs.admin.vo.VoResult;
import com.github.pagehelper.PageInfo;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.*;

/**
 * 接入商信息管理Controller
 *
 * @author
 * @category generated by NovaV1.0
 * @since V1.0
 */
@RestController
@RequestMapping("/base/access")
public class SrvHostController {

    @Autowired
    ISrvHostService srvHostService;

    /**
     * 获取分页列表数据
     *
     * @param query
     * @param page
     * @param rows
     * @return
     */
    @RequestMapping(value = "/list", method = RequestMethod.GET)
    public TableResult<SrvHost> list(SrvHostQuery query, @RequestParam(defaultValue = "0") Integer page,
                                     @RequestParam(defaultValue = "10") Integer rows) {
        PageInfo<SrvHost> pageInfo = srvHostService.getPage(query.getCrieria(), page, rows);
        List<SrvHost> list = pageInfo.getList();
        for (SrvHost data : list) {
            registResolvers(data);
        }

        TableResult<SrvHost> r = new TableResult<>(pageInfo);
        return r;
    }

    /**
     * 创建保存接入商信息管理
     *
     * @return
     */
    @RequestMapping(value = "/add", method = RequestMethod.POST)
    public VoResult<?> add(SrvHost data) {
        if (null == data.getShName() ||
                null == data.getShStatus() ||
                null == data.getShTransformCan() ||
                null == data.getShTransformRemote() ||
                null == data.getShTransformStatus() ||
                null == data.getShKey() ||
                null == data.getShTopic()) {
            return VoResult.error("20010", String.format("存在不能为空的参数为空值。"));
        }
        SrvHost existSrvHost;
        SrvHost conditionKeySrvHost = new SrvHost();
        conditionKeySrvHost.setShKey(data.getShKey());
        existSrvHost = srvHostService.selectOne(conditionKeySrvHost);
        if (null != existSrvHost) {
            return VoResult.error("20010", String.format("key : %s已经存在。", existSrvHost.getShKey()));
        }
        if (null == data.getShAddTime()) {
            data.setShAddTime(new Date());
        }
        if (null == data.getShUptTime()) {
            data.setShUptTime(new Date());
        }
        srvHostService.insert(data);
        return VoResult.success();
    }

    /**
     * 更新接入商信息管理
     *
     * @param data
     * @return
     */
    @RequestMapping(value = "/update", method = RequestMethod.POST)
    public VoResult<?> update(SrvHost data) {
        if (null == data.getShName() ||
                null == data.getShStatus() ||
                null == data.getShTransformCan() ||
                null == data.getShTransformRemote() ||
                null == data.getShTransformStatus() ||
                null == data.getShKey() ||
                null == data.getShTopic()) {
            return VoResult.error("20010", String.format("存在不能为空的参数为空值。"));
        }
        SrvHost existSrvHost;
        SrvHost conditionKeySrvHost = new SrvHost();
        conditionKeySrvHost.setShKey(data.getShKey());
        existSrvHost = srvHostService.selectOne(conditionKeySrvHost);
        if (null != existSrvHost && !existSrvHost.getShKey().equals(data.getShKey())) {
            return VoResult.error("20010", String.format("key : %s已经存在。", existSrvHost.getShKey()));
        }
        if (null == data.getShUptTime()) {
            data.setShUptTime(new Date());
        }
        srvHostService.updateByPrimaryKeySelective(data);
        return VoResult.success();
    }

    /**
     * 删除接入商信息管理
     *
     * @return
     */
    @RequestMapping(value = "delete", method = RequestMethod.DELETE)
    public VoResult<?> delete(@RequestParam(required = true) final Integer[] ids) {
        srvHostService.batchDelete(ids);
        return VoResult.success();
    }

    /**
     * 注册属性内容解析器
     */
    void registResolvers(SrvHost data) {
        if (data != null) {
            data.registResolver(com.ccclubs.admin.resolver.SrvHostResolver.转发指令结果.getResolver());
            data.registResolver(com.ccclubs.admin.resolver.SrvHostResolver.转发状态.getResolver());
            data.registResolver(com.ccclubs.admin.resolver.SrvHostResolver.转发CAN.getResolver());
            data.registResolver(com.ccclubs.admin.resolver.SrvHostResolver.状态.getResolver());
        }
    }

    /**
     * 获取单条接入商信息管理信息
     */
    @RequestMapping(value = "/detail/{id}", method = RequestMethod.GET)
    public VoResult<Map<String, SrvHost>> detail(@PathVariable(required = true) Long id) {
        SrvHost data = srvHostService.selectByPrimaryKey(id.intValue());
        Map<String, SrvHost> map = new HashMap<String, SrvHost>();
        registResolvers(data);
        map.put("tbody", data);
        return VoResult.success().setValue(map);
    }


    /**
     * 根据文本检索接入商信息管理信息
     */
    @RequestMapping(value = "/query", method = RequestMethod.GET)
    public VoResult<Map<String, List<Map<String, Object>>>> query(String text, String where, SrvHost queryRecord) {
        SrvHostCrieria query = new SrvHostCrieria();
        SrvHostCrieria.Criteria c = query.createCriteria();
        if (!StringUtils.isEmpty(text)) {
            String val = String.valueOf(text);
            c.andshNameLike(val);
        }
        if (!StringUtils.isEmpty(where)) {
            Integer val = Integer.valueOf(where);
            c.andshIdEqualTo(val);
        }
        PageInfo<SrvHost> pageInfo = srvHostService.getPage(query, 0, 10);
        List<SrvHost> list = pageInfo.getList();

        List<Map<String, Object>> mapList = new ArrayList<Map<String, Object>>(list.size());
        Map<String, Object> map;
        for (SrvHost data : list) {
            map = new HashMap<String, Object>();
            map.put("value", data.getShId());
            map.put("text", data.getShName());
            mapList.add(map);
        }
        return VoResult.success().setValue(mapList);
    }

}
