package com.ccclubs.admin.controller.mqtt;

import com.ccclubs.admin.entity.CsMappingCrieria;
import com.ccclubs.admin.entity.CsStateCrieria;
import com.ccclubs.admin.entity.CsVehicleCrieria;
import com.ccclubs.admin.model.*;
import com.ccclubs.admin.query.CsStateQuery;
import com.ccclubs.admin.service.*;
import com.ccclubs.admin.task.threads.ReportThread;
import com.ccclubs.admin.util.EvManageContext;
import com.ccclubs.admin.util.UserAccessUtils;
import com.ccclubs.admin.vo.TableResult;
import com.ccclubs.admin.vo.VoResult;
import com.github.pagehelper.PageInfo;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.*;

/**
 * 车辆实时状态Controller
 *
 * @author
 * @category generated by NovaV1.0
 * @since V1.0
 */
@RestController
@RequestMapping("/monitor/state")
public class CsStateController {
    private static Logger logger = LoggerFactory.getLogger(CsStateController.class);

    @Autowired
    ReportThread reportThread;

    @Autowired
    ICsStateService csStateService;

    @Autowired
    ISrvGroupService srvGroupService;
    @Autowired
    ICsModelMappingService csModelMappingService;
    @Autowired
    ICsMappingService csMappingService;
    @Autowired
    UserAccessUtils userAccessUtils;
    @Autowired
    ICsVehicleService csVehicleService;

    /**
     * 获取分页列表数据
     *
     * @param query
     * @param page
     * @param rows
     * @return
     */
    @RequestMapping(value = "/list", method = RequestMethod.GET)
    public TableResult<CsState> list(
            @CookieValue("token") String token,
            CsStateQuery query,
            @RequestParam(defaultValue = "0") Integer page,
            @RequestParam(defaultValue = "10") Integer rows) {
        SrvUser user = userAccessUtils.getCurrentUser(token);
        this.addQueryConditionsByUser(user, query);
        PageInfo<CsState> pageInfo = csStateService.getPage(query.getCrieria(), page, rows);
        List<CsState> list = pageInfo.getList();
        for (CsState data : list) {
            registResolvers(data);
        }

        TableResult<CsState> r = new TableResult<>(pageInfo);
        return r;
    }

    /**
     * 根据用户添加查询条件。
     */
    private void addQueryConditionsByUser(SrvUser user, CsStateQuery query) {
        //首先判断用户所在的组。
        SrvGroup srvGroup = srvGroupService.selectByPrimaryKey(user.getSuGroup().intValue());
        if (srvGroup.getSgFlag().equals("sys_user")) {
            //系统用户，此种用户可以随意查询（为所欲为）

        } else if (srvGroup.getSgFlag().equals("factory_user")) {
            CsVehicleCrieria csVehicleCrieria = new CsVehicleCrieria();
            CsVehicleCrieria.Criteria criteria = csVehicleCrieria.createCriteria();
            List<CsVehicle> csVehicleList = null;
            //车厂 （按照车型进行查询）
            CsModelMapping csModelMapping = new CsModelMapping();
            csModelMapping.setUserId(user.getSuId());
            List<CsModelMapping> csModelMappingList = csModelMappingService.select(csModelMapping);
            if (null != csModelMappingList && csModelMappingList.size() > 0) {
                List<Integer> csModelIds = new ArrayList<>();
                for (int i = 0; i < csModelMappingList.size(); i++) {
                    csModelIds.add(csModelMappingList.get(i).getModelId());
                }
                criteria.andcsvModelIn(csModelIds);
                //csVehicleQuery.setCsvModelIn(csModelIds);
            }

            csVehicleList = csVehicleService.selectByExample(csVehicleCrieria);
            if (csVehicleList != null) {
                Integer[] carIds = new Integer[csVehicleList.size()];
                for (int i = 0; i < csVehicleList.size(); i++) {
                    carIds[i] = csVehicleList.get(i).getCsvId();
                }
                query.setCssCarIn(carIds);
            } else {
                //query.setCssCarEquals();
            }


        } else if (srvGroup.getSgFlag().equals("platform_user")) {
            //小散户（通过mapping进行对应）
            CsMappingCrieria csMappingCrieria = new CsMappingCrieria();
            CsMappingCrieria.Criteria criteria = csMappingCrieria.createCriteria();
            criteria.andcsmManageEqualTo(user.getSuId());
            List<CsMapping> csMappingList = csMappingService.selectByExample(csMappingCrieria);
            if (null != csMappingList && csMappingList.size() > 0) {
                Integer[] carIds = new Integer[csMappingList.size()];
                for (int i = 0; i < csMappingList.size(); i++) {
                    carIds[i] = csMappingList.get(i).getCsmCar();
                }
                query.setCssCarIn(carIds);
            }

        }
    }


    /**
     * 注册属性内容解析器
     */
    void registResolvers(CsState data) {
        if (data != null) {
            data.registResolver(com.ccclubs.admin.resolver.CsStateResolver.接入商.getResolver());
            data.registResolver(com.ccclubs.admin.resolver.CsStateResolver.车机号.getResolver());
            data.registResolver(com.ccclubs.admin.resolver.CsStateResolver.车辆.getResolver());
            data.registResolver(com.ccclubs.admin.resolver.CsStateResolver.充电状态.getResolver());
            data.registResolver(com.ccclubs.admin.resolver.CsStateResolver.GPS有效性.getResolver());
            data.registResolver(com.ccclubs.admin.resolver.CsStateResolver.循环模式.getResolver());
            data.registResolver(com.ccclubs.admin.resolver.CsStateResolver.PTC启停.getResolver());
            data.registResolver(com.ccclubs.admin.resolver.CsStateResolver.压缩机.getResolver());
            data.registResolver(com.ccclubs.admin.resolver.CsStateResolver.档风量.getResolver());
            data.registResolver(com.ccclubs.admin.resolver.CsStateResolver.功耗模式.getResolver());
            data.registResolver(com.ccclubs.admin.resolver.CsStateResolver.发动机状态.getResolver());
            data.registResolver(com.ccclubs.admin.resolver.CsStateResolver.档位.getResolver());
            data.registResolver(com.ccclubs.admin.resolver.CsStateResolver.网络类型.getResolver());
        }
    }

    /**
     * 获取单条车辆实时状态信息
     */
    @RequestMapping(value = "/detail/{id}", method = RequestMethod.GET)
    public VoResult<Map<String, CsState>> detail(@PathVariable(required = true) Long id) {
        CsState data = csStateService.selectByPrimaryKey(id.intValue());
        Map<String, CsState> map = new HashMap<String, CsState>();
        registResolvers(data);
        map.put("tbody", data);
        return VoResult.success().setValue(map);
    }


    /**
     * 根据文本检索车辆实时状态信息
     */
    @RequestMapping(value = "/query", method = RequestMethod.GET)
    public VoResult<Map<String, List<Map<String, Object>>>> query(String text, String where, CsState queryRecord) {
        CsStateCrieria query = new CsStateCrieria();
        CsStateCrieria.Criteria c = query.createCriteria();
        if (!StringUtils.isEmpty(text)) {
            String val = String.valueOf(text);
            c.andcssNumberEqualTo(val);
        }
        if (!StringUtils.isEmpty(where)) {
            Integer val = Integer.valueOf(where);
            c.andcssIdEqualTo(val);
        }
        PageInfo<CsState> pageInfo = csStateService.getPage(query, 0, 10);
        List<CsState> list = pageInfo.getList();

        List<Map<String, Object>> mapList = new ArrayList<Map<String, Object>>(list.size());
        Map<String, Object> map;
        for (CsState data : list) {
            map = new HashMap<String, Object>();
            map.put("value", data.getCssId());
            map.put("text", data.getCssNumber());
            mapList.add(map);
        }
        return VoResult.success().setValue(mapList);
    }

    @RequestMapping(value = "/report", method = RequestMethod.POST)
    public VoResult<String> getReport(@RequestBody ReportParam<CsStateQuery> reportParam) {
        List<CsState> list;
        if (reportParam.getAllReport() == 0) {
            PageInfo<CsState> pageInfo = csStateService.getPage(
                    reportParam.getQuery().getCrieria(),
                    reportParam.getPage(),
                    reportParam.getRows());
            list = pageInfo.getList();
        } else {
            list = csStateService.getAllByParam(reportParam.getQuery().getCrieria());
        }
        for (CsState data : list) {
            registResolvers(data);
        }

        String uuid = UUID.randomUUID().toString();
        reportThread.setBaseName("State");
        reportThread.setList(list);
        reportThread.setUserUuid(uuid);
        reportThread.setReportParam(reportParam);
        logger.info("start running report State thread.");
        EvManageContext.getThreadPool().execute(reportThread);

        VoResult<String> r = new VoResult<>();
        r.setSuccess(true).setMessage("导出任务已经开始执行，请稍候。");
        r.setValue(uuid);
        return r;

    }

}
