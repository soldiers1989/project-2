package com.ccclubs.admin.controller.common;

import com.alibaba.fastjson.JSON;
import com.ccclubs.admin.vo.VoResult;
import com.ccclubs.protocol.dto.gb.GBMessage;
import com.ccclubs.protocol.dto.jt808.T808Message;
import com.ccclubs.protocol.dto.mqtt.MqMessage;
import com.ccclubs.protocol.util.StringUtils;
import com.ccclubs.protocol.util.Tools;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

/**
 * 协议解析工具Controller
 *
 * @author
 * @category generated by NovaV1.0
 * @since V1.0
 */
@RestController
@RequestMapping("/protocol")
public class ProtocolController {

    private static final Logger logger = LoggerFactory.getLogger(ProtocolController.class);
    /**
     * 国标协议
     */
    private String GBMESSAGE_PRE = "2323";
    /**
     * 808协议
     */
    private String JT808_PRE = "7E";


    @RequestMapping(value = "/transfer", method = RequestMethod.GET)
    public VoResult<String> transfer(String data) {
        if (!StringUtils.empty(data)) {
            try {
                byte[] srcByteArray = Tools.HexString2Bytes(data.trim());
                if (data.startsWith(GBMESSAGE_PRE)) {
                    GBMessage gbMessage = new GBMessage();
                    gbMessage.ReadFromBytes(srcByteArray);
                    VoResult<String> r = new VoResult<>();
                    r.setSuccess(true);
                    r.setValue(gbMessage.toString());
                    return r;
                }

                if (data.startsWith(JT808_PRE)) {
                    T808Message t808Message = new T808Message();
                    t808Message.ReadFromBytes(srcByteArray);
                    VoResult<String> r = new VoResult<>();
                    r.setSuccess(true);
                    r.setValue(JSON.toJSONString(t808Message));
                    return r;
                }

                MqMessage mqMessage = new MqMessage();
                mqMessage.ReadFromBytes(srcByteArray);

                VoResult<String> r = new VoResult<>();
                r.setSuccess(true);
                r.setValue(JSON.toJSONString(mqMessage));
                return r;

            } catch (Exception ex) {
                ex.printStackTrace();
                VoResult<String> r = new VoResult<>();
                r.setSuccess(true).setMessage("原始报文转换出错，请检查报文数据");
                r.setValue(null);
                return r;
            }
        }

        VoResult<String> r = new VoResult<>();
        r.setSuccess(true).setMessage("请输入原始报文");
        r.setValue(null);
        return r;
    }
}
