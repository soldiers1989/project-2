package com.ccclubs.admin.controller.base;

import com.ccclubs.admin.entity.CsStatisticsCrieria;
import com.ccclubs.admin.model.CsStatistics;
import com.ccclubs.admin.model.ReportParam;
import com.ccclubs.admin.query.CsStatisticsQuery;
import com.ccclubs.admin.resolver.CsStatisticsResolver;
import com.ccclubs.admin.service.ICsStatisticsService;
import com.ccclubs.admin.task.threads.ReportThread;
import com.ccclubs.admin.util.EvManageContext;
import com.ccclubs.admin.vo.TableResult;
import com.ccclubs.admin.vo.VoResult;
import com.github.pagehelper.PageInfo;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.*;

/**
 * 车辆统计数据Controller
 *
 * @author
 * @category generated by NovaV1.0
 * @since V1.0
 */
@RestController
@RequestMapping("/monitor/statistics")
public class CsStatisticsController {

    Logger logger = LoggerFactory.getLogger(CsStatisticsController.class);

    @Autowired
    ICsStatisticsService csStatisticsService;
    @Autowired
    ReportThread reportThread;

    /**
     * 获取分页列表数据
     *
     * @param query
     * @param page
     * @param rows
     * @return
     */
    @RequestMapping(value = "/list", method = RequestMethod.GET)
    public TableResult<CsStatistics> list(CsStatisticsQuery query, @RequestParam(defaultValue = "0") Integer page,
                                          @RequestParam(defaultValue = "10") Integer rows) {
        query.setCssUnitTimeGreater(60 * 60 * 1000L);//查询的数据要是长间隔的计算数据。
        PageInfo<CsStatistics> pageInfo = csStatisticsService.getPage(query.getCrieria(), page, rows);
        List<CsStatistics> list = pageInfo.getList();
        for (CsStatistics data : list) {
            registResolvers(data);
        }

        TableResult<CsStatistics> r = new TableResult<>(pageInfo);
        return r;
    }


    /**
     * 注册属性内容解析器
     */
    void registResolvers(CsStatistics data) {
        if (data != null) {
            data.registResolver(CsStatisticsResolver.车型.getResolver());
        }
    }

    /**
     * 获取单条车辆统计数据信息
     */
    @RequestMapping(value = "/detail/{id}", method = RequestMethod.GET)
    public VoResult<Map<String, CsStatistics>> detail(@PathVariable(required = true) Long id) {
        CsStatistics data = csStatisticsService.selectByPrimaryKey(id.intValue());
        Map<String, CsStatistics> map = new HashMap<String, CsStatistics>();
        registResolvers(data);
        map.put("tbody", data);
        return VoResult.success().setValue(map);
    }


    /**
     * 根据文本检索车辆统计数据信息
     */
    @RequestMapping(value = "/query", method = RequestMethod.GET)
    public VoResult<Map<String, List<Map<String, Object>>>> query(String text, String where, CsStatistics queryRecord) {
        CsStatisticsCrieria query = new CsStatisticsCrieria();
        CsStatisticsCrieria.Criteria c = query.createCriteria();
        if (!StringUtils.isEmpty(text)) {
            Integer val = Integer.valueOf(text);
            c.andcssIdEqualTo(val);
        }
        if (!StringUtils.isEmpty(where)) {
            Integer val = Integer.valueOf(where);
            c.andcssIdEqualTo(val);
        }
        PageInfo<CsStatistics> pageInfo = csStatisticsService.getPage(query, 0, 10);
        List<CsStatistics> list = pageInfo.getList();

        List<Map<String, Object>> mapList = new ArrayList<Map<String, Object>>(list.size());
        Map<String, Object> map;
        for (CsStatistics data : list) {
            map = new HashMap<String, Object>();
            map.put("value", data.getCssId());
            map.put("text", data.getCssId());
            mapList.add(map);
        }
        return VoResult.success().setValue(mapList);
    }

    /**
     * 根据文本检索统计信息并导出。
     */
    @RequestMapping(value = "/report", method = RequestMethod.POST)
    public VoResult<String> getReport(@RequestBody ReportParam<CsStatisticsQuery> reportParam) {
        List<CsStatistics> list;
        if (reportParam.getAllReport() == 0) {
            PageInfo<CsStatistics> pageInfo = csStatisticsService.getPage(
                    reportParam.getQuery().getCrieria(),
                    reportParam.getPage(),
                    reportParam.getRows());
            list = pageInfo.getList();
        } else {
            list = csStatisticsService.getAllByParam(reportParam.getQuery().getCrieria());
        }

        for (CsStatistics data : list) {
            registResolvers(data);
        }
        String uuid = UUID.randomUUID().toString();
        reportThread.setBaseName("Statistics");
        reportThread.setList(list);
        reportThread.setUserUuid(uuid);
        reportThread.setReportParam(reportParam);
        logger.info("start running report Statistics thread.");
        EvManageContext.getThreadPool().execute(reportThread);

        VoResult<String> r = new VoResult<>();
        r.setSuccess(true).setMessage("导出任务已经开始执行，请稍候。");
        r.setValue(uuid);
        return r;


    }
}
